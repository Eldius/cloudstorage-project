group 'net.eldiosantos.cloudstorage'
version '0.0.1-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

test {
    testLogging {
        showStandardStreams = true
        showExceptions = true
        exceptionFormat = 'full'
        //events = ['standard_out', 'standard_error']
    }

    systemProperty 'storage.dropbox.url', 'wrong_url'

    options {
        systemProperty "storage.dropbox.contentUrl", "wrong_url_again"
    }
}


apply plugin: 'org.junit.platform.gradle.plugin'

ext.junit4Version = '4.12'
ext.junitVintageVersion = '4.12.0-M3'
ext.junitPlatformVersion = '1.0.0-M3'
ext.junitJupiterVersion = '5.0.0-M3'
ext.log4jVersion = '2.6.2'


compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += '-parameters'
}

junitPlatform {
    platformVersion '1.0.0-M3'
    filters {
        engines {
            include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
}

afterEvaluate {
    def junitPlatformTestTask = tasks.getByName('junitPlatformTest')

    junitPlatformTestTask.systemProperty 'storage.dropbox.app-key', System.getenv("appkey")
    junitPlatformTestTask.systemProperty 'storage.dropbox.app-secret', System.getenv("appsecret")
    junitPlatformTestTask.systemProperty 'storage.dropbox.access-token', System.getenv("accesstoken")
}

dependencies {
    compile project(":cloudstorage-configuration")
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'

    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.21'

    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    // If you also want to support JUnit 3 and JUnit 4 tests
    testCompile("junit:junit:${junit4Version}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")

    testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
}
